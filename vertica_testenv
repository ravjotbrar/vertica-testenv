#!/bin/sh

create_kdc(){
	echo "Setting up KDC"
	docker network create $NETWORK_NAME
	docker build -t vertica/kdc docker/kdc
	docker run -d --privileged --name=$KDC_NAME --network=$NETWORK_NAME vertica/kdc
	docker exec $KDC_NAME /kdc/install_kdc.sh
}

create_db(){
	echo "Creating database"
	if [ ! -f "docker-vertica/packages/vertica-ce.latest.rpm" ]; then
		export VERTICA_CE_URL="https://s3.amazonaws.com/vertica-community-edition-for-testing/XCz9cp7m/vertica-9.1.1-0.x86_64.RHEL6.rpm"
		git clone https://github.com/jbfavre/docker-vertica.git
		curl $VERTICA_CE_URL --create-dirs -o docker-vertica/packages/vertica-ce.latest.rpm
	fi
	docker build -f docker-vertica/Dockerfile.centos.7_9.x --build-arg VERTICA_PACKAGE=vertica-ce.latest.rpm -t jbfavre/vertica docker-vertica
	docker run -d -p 5433:5433 --name=$DB_NAME --network=$NETWORK_NAME jbfavre/vertica
	
	echo "Making service keytab"
	export V_PRINC=vertica/vertica.example.com@EXAMPLE.COM
	docker exec $KDC_NAME kadmin.local -q "addprinc -randkey $V_PRINC"
	docker exec $KDC_NAME kadmin.local -q "ktadd -norandkey -k vertica.keytab $V_PRINC"
	docker cp $KDC_NAME:vertica.keytab .
	docker cp vertica.keytab $DB_NAME:/
	rm vertica.keytab

	echo "Waiting for db to start"
	sleep 60

	echo "Kerberize db"
	docker cp docker/kdc/kerberize.sh $DB_NAME:/
	docker exec $DB_NAME yum install -y krb5-workstation
	docker exec $DB_NAME /bin/sh -c "echo $(docker inspect -f "{{.NetworkSettings.Networks.$NETWORK_NAME.IPAddress }}" $KDC_NAME) kerberos.example.com >> /etc/hosts"
	docker exec $DB_NAME /kerberize.sh
}

create_sandbox(){
	docker build -t vertica/sandbox docker/sandbox
	docker run --network=$NETWORK_NAME -t -d --name=$SANDBOX_NAME vertica/sandbox
	docker exec $SANDBOX_NAME /bin/sh -c "echo $(docker inspect -f "{{.NetworkSettings.Networks.$NETWORK_NAME.IPAddress }}" $KDC_NAME) kerberos.example.com >> /etc/hosts"
	docker exec $SANDBOX_NAME /bin/sh -c "echo $(docker inspect -f "{{.NetworkSettings.Networks.$NETWORK_NAME.IPAddress }}" $DB_NAME) vertica.example.com vertica >> /etc/hosts"
	docker exec -it $SANDBOX_NAME /bin/bash
}

create_test(){
	if [[ $PYENV =~ ^py[0-9][0-9]$ ]]; then
	VER=${PYENV:2:1}.${PYENV:3}

	cp docker/test/Dockerfile docker/test/Dockerfile.backup
	sed -i "s/<ver>/$VER/g" docker/test/Dockerfile
	sed -i "s/<toxenv>/$PYENV/g" docker/test/Dockerfile
	KDC_ADDR=$(docker inspect -f "{{.NetworkSettings.Networks.$NETWORK_NAME.IPAddress }" $KDC_NAME)
	DB_ADDR=$(docker inspect -f "{{.NetworkSettings.Networks.$NETWORK_NAME.IPAddress }" $DB_NAME)
	docker build -f docker/test/Dockerfile -t vertica/test --build-arg kdc_addr=$KDC_ADDR ..
	docker run --network=$NETWORK_NAME --rm --name=vp.test vertica/test "-e $PYENV"

	mv docker/test/Dockerfile.backup docker/test/Dockerfile	
	docker image rm vertica/test
	else echo "Invalid python environment."
	fi
}

stop_containers(){	
	echo "Stopping containers"
	docker container stop $KDC_NAME
	docker container stop $DB_NAME
	docker container stop $SANDBOX_NAME > /dev/null
}

clean_system(){
	echo "Cleaning up"
	docker container rm $KDC_NAME
	docker container rm $DB_NAME
	docker container rm $SANDBOX_NAME > /dev/null
	docker image rm jbfavre/vertica
	docker image rm vertica/kdc
	docker image rm vertica/sandbox > /dev/null
	docker network remove $NETWORK_NAME
}

echo_use(){
	echo "Usage: $0 [arguments] command"
}

echo_help(){
	echo -e '''
vertica_testenv sets up a kerberos-enabled vertica database to facilitate testing.
Usage: vertica_testenv [arguments] command

Commands: [start|test|stop|clean]
Start \t Build vertica and kerberos.
Test \t Build and run the vertica-python test suite.
Stop \t Stop the containers.
Clean \t Remove the containers and the images.

Options: --kdc, --db, --py
--kdc \t Name of the kdc container (default: vp.kdc)
--db \t Name of the database container (default: vp.db)
--py \t Python version. Options: py37 (default),py27,py34,py35,py36.
'''
}

if [ $# -eq 0 ]; then
	echo_use
	exit 0
fi

KDC_NAME=$USER.kdc
DB_NAME=$USER.db
NETWORK_NAME=${USER}test
SANDBOX_NAME=${USER}.sandbox
PYENV=py37
while [ -n "$1" ]; do
	case "$1" in
	--help) echo_help
	exit 0
	;;
	--kdc) KDC_NAME=$2
	shift
	;;
	--db) DB_NAME=$2
	shift
	;;
	--py) PYENV=$2
	shift	
	;;
	--) shift
	break ;;
	*) break ;;
	esac	
	shift
done

op=$1
if [ $op = 'start' ]; then
	create_kdc
	create_db
elif [ $op = 'sandbox' ]; then
	create_sandbox
elif [ $op = 'test' ]; then
	create_test
elif [ $op = 'stop' ]; then
	stop_containers
elif [ $op = 'clean' ]; then
	clean_system
else
	echo_use
fi
